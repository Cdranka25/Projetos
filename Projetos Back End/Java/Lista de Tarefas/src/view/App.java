package view;

import java.awt.MediaTracker;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.nio.charset.StandardCharsets;
import java.text.Normalizer;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.awt.event.KeyEvent;
import java.awt.event.KeyAdapter;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import model.*;

/**
 *
 * @author user
 */
public class App extends javax.swing.JFrame {

    int numeroLinha;
    String caminhoPadrão = "txt//teste.txt";
    String caminhoIco = "ico/ListaDeTarefa.ico";
    Gerador_txt gerador = new Gerador_txt(caminhoPadrão);
    List<Lista> lista;

    /**
     * Creates new form NewJFrame
     *
     * @throws java.io.IOException
     */
    public App() throws IOException {

        initComponents();

        Utilitario u = new Utilitario();
        u.InserirIcone(this);

        setLocationRelativeTo(null);

        // Carregar tarefas e adicionar à tabela
        lista = carregarTarefas();
        for (Lista tarefa : lista) {
            adicionarLinhaTabela(tarefa.getTarefa(), tarefa.getPrioridade(), tarefa.getCategoria(),
                    tarefa.isConcluido());
        }

        // Adicionar KeyListener ao JFrame
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    // Verificar qual botão deve ser acionado
                    if (jButton_IncluirLinha.isFocusOwner()) {
                        jButton_IncluirLinha.doClick(); // Simula um clique no botão Incluir Linha
                    } else if (jButton_ExcluirLinha.isFocusOwner()) {
                        jButton_ExcluirLinha.doClick(); // Simula um clique no botão Excluir Linha
                    }
                }
            }
        });

        // Permitir que o JFrame receba eventos de teclado
        setFocusable(true);
        requestFocusInWindow();

        recalcular();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPopupMenu3 = new javax.swing.JPopupMenu();
        jPopupMenu4 = new javax.swing.JPopupMenu();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaComArquivo = new javax.swing.JTable();
        jButton_ExcluirLinha = new javax.swing.JButton();
        jButton_IncluirLinha = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Lista de Tarefas");

        tabelaComArquivo.setAutoCreateRowSorter(true);
        tabelaComArquivo.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {

                },
                new String[] {
                        "Tarefa", "Prioridade", "Categoria", "Concluído", "Nº"
                }) {
            Class[] types = new Class[] {
                    java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class,
                    java.lang.Integer.class
            };
            boolean[] canEdit = new boolean[] {
                    false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaComArquivo);
        if (tabelaComArquivo.getColumnModel().getColumnCount() > 0) {
            tabelaComArquivo.getColumnModel().getColumn(4).setResizable(false);
        }

        jButton_ExcluirLinha.setText("Excluir Linha");
        jButton_ExcluirLinha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ExcluirLinhaActionPerformed(evt);
            }
        });

        jButton_IncluirLinha.setText("Incluir Linha");
        jButton_IncluirLinha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_IncluirLinhaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 648,
                                                Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
                                                jPanel1Layout.createSequentialGroup()
                                                        .addGap(0, 0, Short.MAX_VALUE)
                                                        .addComponent(jButton_IncluirLinha)
                                                        .addPreferredGap(
                                                                javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(jButton_ExcluirLinha)))
                                .addContainerGap()));
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 509,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jButton_IncluirLinha)
                                        .addComponent(jButton_ExcluirLinha))
                                .addContainerGap(14, Short.MAX_VALUE)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING,
                                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                                Short.MAX_VALUE));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_IncluirLinhaActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton_IncluirLinhaActionPerformed
        // TODO add your handling code here:
        App_InserirLinha inserirLinha = new App_InserirLinha(this);
        inserirLinha.setLocationRelativeTo(this); // Centraliza a janela
        inserirLinha.setVisible(true);

    }// GEN-LAST:event_jButton_IncluirLinhaActionPerformed

    private void jButton_ExcluirLinhaActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton_ExcluirLinhaActionPerformed
        // TODO add your handling code here:
        App_ExcluirLinha excluirTela = new App_ExcluirLinha(this);
        excluirTela.setLocationRelativeTo(this);
        excluirTela.setVisible(true);
    }// GEN-LAST:event_jButton_ExcluirLinhaActionPerformed

    public void adicionarLinhaTabela(String tarefa, Prioridades prioridade, Categorias categoria, boolean concluido) {
        DefaultTableModel model = (DefaultTableModel) tabelaComArquivo.getModel();
        model.addRow(new Object[]{tarefa, prioridade, categoria, concluido, numeroLinha});
        numeroLinha++; // Incrementar apenas uma vez ao adicionar novas linhas
    }

    public void adicionarTarefa(String tarefa, Prioridades prioridade, Categorias categoria, boolean concluido) {
        Lista novaTarefa = new Lista(tarefa, prioridade, categoria, concluido);
        lista.add(novaTarefa);
        gerador.escrever(novaTarefa.toString(), true);
    }

    public List<Lista> carregarTarefas() throws IOException {
        List<Lista> tarefas = new ArrayList<>();
        String header = "Tarefa;Prioridade;Categoria;Concluido";

        try (BufferedReader reader = new BufferedReader(
                new InputStreamReader(new FileInputStream(caminhoPadrão), StandardCharsets.UTF_8))) {
            String linha;
            if ((linha = reader.readLine()) != null && !linha.trim().equals(header)) {
                System.out.println("Cabeçalho inesperado: " + linha);
            }

            while ((linha = reader.readLine()) != null) {
                linha = linha.trim();
                if (!linha.isEmpty()) {
                    linha = linha.replace(",", ";");
                    String[] campos = linha.split(";");
                    if (campos.length == 4) {
                        try {
                            String tarefa = campos[0].trim();
                            Prioridades prioridade = Prioridades.fromString(campos[1].trim());
                            Categorias categoria = Categorias.fromString(campos[2].trim());
                            boolean concluido = Boolean.parseBoolean(campos[3].trim());
                            Lista novaTarefa = new Lista(tarefa, prioridade, categoria, concluido);
                            tarefas.add(novaTarefa);
                            // Remova a linha abaixo para evitar duplicação
                            // adicionarLinhaTabela(tarefa, prioridade, categoria, concluido);
                        } catch (IllegalArgumentException e) {
                            System.out.println("Erro de formatação na linha: " + linha);
                        }
                    } else {
                        System.out.println("Linha mal formatada: " + linha);
                    }
                }
            }
        }
        return tarefas;
    }

    public void recalcular() {
        recalcContador();
    }

    private void recalcContador() {
        DefaultTableModel model = (DefaultTableModel) tabelaComArquivo.getModel();
        int counter = 1;
        for (int i = 0; i < model.getRowCount(); i++) {
            model.setValueAt(counter, i, 4); // Atualizando a numeração da linha
            counter++;
        }
    }

    // Função para remover acentos de uma string
    public static String removerAcentos(String texto) {
        return Normalizer.normalize(texto, Normalizer.Form.NFD).replaceAll("[^\\p{ASCII}]", "");
    }

    public void atualizarArquivo(int row, boolean concluido) {
        // Obter a tarefa, prioridade e categoria da linha alterada
        DefaultTableModel model = (DefaultTableModel) tabelaComArquivo.getModel();
        String tarefa = (String) model.getValueAt(row, 0);
        Prioridades prioridade = (Prioridades) model.getValueAt(row, 1);
        Categorias categoria = (Categorias) model.getValueAt(row, 2);

        // Atualiza o valor de concluído no arquivo
        try {
            // Lê o arquivo existente
            List<Lista> tarefas = carregarTarefas();

            // Atualiza a tarefa correspondente
            for (Lista tarefaLista : tarefas) {
                if (tarefaLista.getTarefa().equals(tarefa)
                        && tarefaLista.getPrioridade().equals(prioridade)
                        && tarefaLista.getCategoria().equals(categoria)) {
                    tarefaLista.setConcluido(concluido); // Atualiza o status de concluído
                }
            }

            // Reescreve o arquivo com os dados atualizados
            escreverTarefasNoArquivo(tarefas);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void escreverTarefasNoArquivo(List<Lista> tarefas) throws IOException {
        try (BufferedWriter writer = new BufferedWriter(
                new OutputStreamWriter(new FileOutputStream(caminhoPadrão), StandardCharsets.UTF_8))) {
            writer.write("Tarefa;Prioridade;Categoria;Concluido");
            writer.newLine();
            for (Lista tarefa : tarefas) {
                writer.write(tarefa.getTarefa() + ";"
                        + tarefa.getPrioridade() + ";"
                        + tarefa.getCategoria() + ";"
                        + tarefa.isConcluido());
                writer.newLine();
            }
        }
    }

    public void excluirLinha(int numeroLinhaInformado) {
        DefaultTableModel model = (DefaultTableModel) tabelaComArquivo.getModel();
        int rowToDelete = -1;

        // Encontrar a linha correspondente ao número informado
        for (int i = 0; i < model.getRowCount(); i++) {
            Object valor = model.getValueAt(i, 4);
            if (valor instanceof Integer) {
                int contador = (Integer) valor;
                if (contador == numeroLinhaInformado) {
                    rowToDelete = i;
                    break;
                }
            }
        }
        // Excluir a linha se encontrada
        if (rowToDelete != -1) {
            model.removeRow(rowToDelete);
            lista.remove(rowToDelete);
            recalcContador(); // Recalcular os números das linhas após remoção

            try {
                escreverTarefasNoArquivo(lista); // Reescrever o arquivo com a lista atualizada
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Linha não encontrada");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {

                new App().setVisible(true);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_ExcluirLinha;
    private javax.swing.JButton jButton_IncluirLinha;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JPopupMenu jPopupMenu3;
    private javax.swing.JPopupMenu jPopupMenu4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tabelaComArquivo;
    // End of variables declaration//GEN-END:variables
}
